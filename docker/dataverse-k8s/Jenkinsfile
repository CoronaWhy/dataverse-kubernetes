void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "${env.GIT_URL}"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/docker/dataverse-k8s"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

pipeline {
  agent any
  environment {
    dockerfile = "./docker/dataverse-k8s/glassfish/Dockerfile"
    context = "."
    imagetag = "build-${env.BRANCH_NAME}"
    hublogin = "dockerhub-dataversebot"
    registry = "https://registry.hub.docker.com"
  }
  triggers {
    cron('H H(0-4) * * *')
    githubPush()
  }
  stages {
    stage('checkout') {
      steps { checkout scm }
    }
    stage('build') {
      when {
        anyOf {
          changeset "docker/dataverse-k8s/**"
          triggeredBy 'TimerTrigger'
          tag ""
        }
      }
      steps {
        script {
          docker_image = docker.build("iqss/dataverse-k8s:${env.imagetag}", "--pull -f ${env.dockerfile} ${env.context}")
        }
      }
    }
    stage('push') {
      when {
        anyOf {
          changeset "docker/dataverse-k8s/**"
          triggeredBy 'TimerTrigger'
          tag ""
        }
      }
      parallel {
        stage('release') {
          when {
            tag "v4.*"
          }
          environment {
            imageTag = "${TAG_NAME.substring(1)}"
          }
          steps {
            script {
              docker.withRegistry("${env.registry}", "${env.hublogin}") {
                docker_image.push("${env.imageTag}")
              }
            }
          }
        }
        stage('latest') {
          when {
            branch 'master'
          }
          steps {
            script {
              docker.withRegistry("${env.registry}", "${env.hublogin}") {
                docker_image.push("latest")
              }
            }
          }
        }
      }
    }
  }
  post {
    success {
        setBuildStatus("Image build (if necessary: push) succeeded", "SUCCESS");
    }
    failure {
        setBuildStatus("Image build or push failed", "FAILURE");
    }
  }
}
